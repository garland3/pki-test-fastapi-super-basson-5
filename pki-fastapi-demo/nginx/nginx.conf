worker_processes 1;
events { worker_connections 1024; }
http {
  # Write debug logs to stdout
  error_log /dev/stdout debug;

  # Rich access log including mTLS details
  log_format mtls '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent" rt=$request_time '
                   'ssl=$ssl_protocol/$ssl_cipher verify=$ssl_client_verify '
                   's_dn="$ssl_client_s_dn" i_dn="$ssl_client_i_dn" serial=$ssl_client_serial';
  access_log /dev/stdout mtls;

  server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate           /etc/nginx/certs/server.crt;
    ssl_certificate_key       /etc/nginx/certs/server.key;
    ssl_client_certificate    /etc/nginx/certs/ca.crt;   # trust this CA for client auth
    ssl_verify_client         optional;                  # allow handshake, enforce below
    ssl_protocols             TLSv1.2 TLSv1.3;

    # public health (no client cert)
    location = /health {
      proxy_pass http://app/health;
      proxy_set_header Host $host;
    }

    # API requires verified client cert
    location ^~ /api/ {
      if ($ssl_client_verify != SUCCESS) { return 403; }
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-SSL-Client-Verify      $ssl_client_verify;
      proxy_set_header X-SSL-Client-S-DN        $ssl_client_s_dn;
      proxy_set_header X-SSL-Client-I-DN        $ssl_client_i_dn;
      proxy_set_header X-SSL-Client-Serial      $ssl_client_serial;
      proxy_set_header X-SSL-Client-Fingerprint $ssl_client_fingerprint;
      proxy_pass http://app;
    }

    # UI and everything else (no client cert required)
    # We still forward mTLS headers (they may be empty if no cert provided)
    location / {
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-SSL-Client-Verify      $ssl_client_verify;
      proxy_set_header X-SSL-Client-S-DN        $ssl_client_s_dn;
      proxy_set_header X-SSL-Client-I-DN        $ssl_client_i_dn;
      proxy_set_header X-SSL-Client-Serial      $ssl_client_serial;
      proxy_set_header X-SSL-Client-Fingerprint $ssl_client_fingerprint;
      proxy_pass http://app;
    }
  }
  upstream app { server app:8000; }
}
